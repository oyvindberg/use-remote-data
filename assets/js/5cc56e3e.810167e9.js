(self.webpackChunksite=self.webpackChunksite||[]).push([[708],{250:(e,t,n)=>{var s={"./basic_usage":3172,"./basic_usage.tsx":3172,"./combine":8789,"./combine.tsx":8789,"./create":3832,"./create.tsx":3832,"./dynamic":9641,"./dynamic.tsx":9641,"./handling_failure":2376,"./handling_failure.tsx":2376,"./invalidation":3544,"./invalidation.tsx":3544,"./invalidation_dependencies":1530,"./invalidation_dependencies.tsx":1530,"./invalidation_sometimes":1667,"./invalidation_sometimes.tsx":1667,"./polling":4999,"./polling.tsx":4999,"./use_twice":5550,"./use_twice.tsx":5550};function a(e){var t=r(e);return n(t)}function r(e){if(!n.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}a.keys=function(){return Object.keys(s)},a.resolve=r,e.exports=a,a.id=250},409:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport {\n    RemoteDataStore,\n    useRemoteData,\n    WithRemoteData,\n} from 'use-remote-data';\n\nfunction produce<T>(value: T, delay: number = 1000): Promise<T> {\n    return new Promise((resolve) => setTimeout(() => resolve(value), delay));\n}\n\nexport const Component: React.FC = () => {\n    const computeOne = useRemoteData(() => produce(1));\n    const computeString = useRemoteData(() => produce('Hello'));\n\n    const combinedStore = RemoteDataStore.all(computeOne, computeString);\n\n    return (\n        <WithRemoteData store={combinedStore}>\n            {([num, string]) => (\n                <span>\n                    {num} and {string}\n                </span>\n            )}\n        </WithRemoteData>\n    );\n};\n"},1180:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport {\n    InvalidationStrategy,\n    useRemoteData,\n    WithRemoteData,\n} from 'use-remote-data';\n\nvar i = 0;\nconst freshData = (): Promise<number> =>\n    new Promise((resolve) => {\n        i += 1;\n        setTimeout(() => resolve(i), 1000);\n    });\n\nexport const Component: React.FC = () => {\n    const store = useRemoteData(freshData, {\n        invalidation: InvalidationStrategy.refetchAfterMillis(2000),\n    });\n\n    return (\n        <WithRemoteData store={store}>\n            {(num, isInvalidated) => (\n                <span style={{ color: isInvalidated ? 'darkgray' : 'black' }}>\n                    {num}\n                </span>\n            )}\n        </WithRemoteData>\n    );\n};\n"},1266:(e,t,n)=>{var s={"./basic_usage.tsx":8936,"./combine.tsx":409,"./create.tsx":2556,"./dynamic.tsx":5525,"./handling_failure.tsx":5588,"./invalidation.tsx":1180,"./invalidation_dependencies.tsx":2542,"./invalidation_sometimes.tsx":9439,"./polling.tsx":5107,"./use_twice.tsx":5170};function a(e){var t=r(e);return n(t)}function r(e){if(!n.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}a.keys=function(){return Object.keys(s)},a.resolve=r,e.exports=a,a.id=1266},1530:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>d});var s=n(6540),a=n(558),r=n(4848),o=0;const i=()=>new Promise((e=>{o+=1,setTimeout((()=>e(o)),1e3)})),d=()=>{const[e,t]=s.useState(1),n=(0,a.mp)(i,{dependencies:[e]});return(0,r.jsxs)("div",{children:[(0,r.jsx)("button",{onClick:()=>t(e+1),children:"Bump dep"}),(0,r.jsx)("br",{}),(0,r.jsx)(a.nS,{store:n,children:(e,t)=>(0,r.jsx)("span",{style:{color:t?"darkgray":"black"},children:e})})]})}},1667:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>d});var s=n(6540),a=n(558),r=n(4848),o=0;const i=()=>new Promise((e=>{o+=1,setTimeout((()=>e(o)),1e3)})),d=()=>{const[e,t]=s.useState(!0),n=(0,a.mp)(i,{invalidation:e?a.Mf.refetchAfterMillis(1e3):void 0});return(0,r.jsxs)("div",{children:[(0,r.jsxs)("label",{children:["Autorefresh:",(0,r.jsx)("input",{type:"checkbox",onChange:n=>t(!e),checked:e})]}),(0,r.jsx)("br",{}),(0,r.jsx)(a.nS,{store:n,children:(e,t)=>(0,r.jsx)("span",{style:{color:t?"darkgray":"black"},children:e})})]})}},2376:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>c});n(6540);var s=n(558),a=n(4848),r=0;const o=()=>new Promise((e=>{r+=1,setTimeout((()=>e(r)),1e3)}));var i=0;const d=()=>new Promise(((e,t)=>{(i+=1)%10==0?t(`${i} was dividable by 10`):e(i)})),c=()=>{const e=(0,s.mp)(o,{invalidation:s.Mf.refetchAfterMillis(1e3)}),t=(0,s.mp)(d,{invalidation:s.Mf.refetchAfterMillis(100)});return(0,a.jsx)(s.nS,{store:s.Qt.all(e,t),children:e=>{let[t,n]=e;return(0,a.jsxs)("span",{children:[t," - ",n]})}})}},2542:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport { useRemoteData, WithRemoteData } from 'use-remote-data';\n\nvar i = 0;\nconst freshData = (): Promise<number> =>\n    new Promise((resolve) => {\n        i += 1;\n        setTimeout(() => resolve(i), 1000);\n    });\n\nexport const Component: React.FC = () => {\n    const [dep, setDep] = React.useState(1);\n    const store = useRemoteData(freshData, { dependencies: [dep] });\n\n    return (\n        <div>\n            <button onClick={() => setDep(dep + 1)}>Bump dep</button>\n            <br />\n            <WithRemoteData store={store}>\n                {(num, isInvalidated) => (\n                    <span\n                        style={{ color: isInvalidated ? 'darkgray' : 'black' }}\n                    >\n                        {num}\n                    </span>\n                )}\n            </WithRemoteData>\n        </div>\n    );\n};\n"},2556:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport { useRemoteData, WithRemoteData } from 'use-remote-data';\n\nconst createUser = (name: string): Promise<string> =>\n    new Promise((resolve) => {\n        setTimeout(\n            () => resolve(`created user with name ${name} and id #1`),\n            1000\n        );\n    });\n\nexport const Component: React.FC = () => {\n    const [name, setName] = React.useState('');\n    const [submit, setSubmit] = React.useState(false);\n    const createUserStore = useRemoteData(() => createUser(name));\n\n    return (\n        <div>\n            <h4>Create user</h4>\n            <label>\n                name:\n                <input\n                    onChange={(e) => setName(e.currentTarget.value)}\n                    value={name}\n                />\n            </label>\n            <button onClick={() => setSubmit(true)}>Create user</button>\n            {submit && (\n                <WithRemoteData store={createUserStore}>\n                    {(msg) => <p>{msg}</p>}\n                </WithRemoteData>\n            )}\n        </div>\n    );\n};\n"},2927:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});n(6540);var s=n(8520),a=n(8794),r=n(6289),o=n(4848);const i=n(7879).A,d=()=>(0,o.jsx)(s.A,{title:"Getting started",description:"Getting started",children:(0,o.jsxs)("main",{className:"container",children:[(0,o.jsx)("h1",{children:"Getting started"}),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Installation"}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"npm install use-remote-data"})}),(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"yarn add use-remote-data"})})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Basic usage"}),"The entry point to the library is a React hook called ",(0,o.jsx)("code",{children:"useRemoteData"}),", which takes one parameter: A function which produces a ",(0,o.jsx)("code",{children:"Promise"}),". It needs to be a function and not a straight ",(0,o.jsx)("code",{children:"Promise"}),"in case it fails and needs to be restarted.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),"According to the rules for React hooks they can only be used within a component, as seen below.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),"The thing we get back is a ",(0,o.jsxs)("code",{children:["RemoteDataStore","<T>"]}),", which is where we keep the state the request is currently in.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),"The last thing which happens in this example is that we use a provided React component called"," ",(0,o.jsx)("code",{children:"WithRemoteData"}),". This component requires two props:",(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:["the store we got from ",(0,o.jsx)("code",{children:"useRemoteData"})]}),(0,o.jsxs)("li",{children:["a ",(0,o.jsx)(r.A,{to:"https://reactjs.org/docs/render-props.html",children:"render prop "}),"which specifies how to render once we have all the data we asked for by passing stores"]})]}),"Out of the box this component is useful but not pretty. You're expected to either copy/paste `WithRemoteData` into your own app and customize it, or wrap it in your own component which customizes pending and failure states.",(0,o.jsx)(a.Y,{snippet:"basic_usage"})]}),(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Combining stores"}),(0,o.jsxs)("p",{children:["One of the strengths of ",(0,o.jsx)("code",{children:"RemoteDataStore"})," is its composability. You can take multiple"," ",(0,o.jsx)("code",{children:"RemoteDataStore"}),"s \u2014 each representing a separate request\u2014and combine them into a single store. The combined store moves through the familiar lifecycle (",(0,o.jsx)("code",{children:"Pending"}),", ",(0,o.jsx)("code",{children:"Yes"}),",",(0,o.jsx)("code",{children:"No"}),") based on the states of the individual stores:"]}),(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:["If ",(0,o.jsx)("em",{children:"any"})," of the underlying stores is ",(0,o.jsx)("code",{children:"RemoteData.Pending"}),", the combined store is"," ",(0,o.jsx)("code",{children:"Pending"}),"."]}),(0,o.jsxs)("li",{children:["If ",(0,o.jsx)("em",{children:"all"})," underlying stores are ",(0,o.jsx)("code",{children:"RemoteData.Yes"}),", the combined store provides a tuple of their results."]}),(0,o.jsxs)("li",{children:["If ",(0,o.jsx)("em",{children:"any"})," store fails, the combined store fails. When the user clicks \u201cretry,\u201d only the store(s) that failed will be retried; the others remain intact."]})]}),(0,o.jsxs)("p",{children:["This approach keeps your data loading logic organized and type-safe. In the render prop for"," ",(0,o.jsx)("code",{children:"WithRemoteData"}),", you can use",(0,o.jsxs)("a",{href:"https://levelup.gitconnected.com/crazy-powerful-typescript-tuple-types-9b121e0a690c",children:[" ","tuple destructuring"," "]}),"to seamlessly access each store\u2019s result, and TypeScript tooling (including IntelliJ) will correctly infer and highlight the types for every element in the tuple."]}),(0,o.jsx)(a.Y,{snippet:"combine"}),(0,o.jsx)("br",{}),(0,o.jsx)("h3",{children:"A note about TypeScript tooling"}),(0,o.jsxs)("p",{children:["The TypeScript compiler (and IDEs like IntelliJ) understands the combined store\u2019s shape perfectly. In fact, you can hold the",(0,o.jsx)("kbd",{children:"Ctrl"})," (or ",(0,o.jsx)("kbd",{children:"Command"})," on macOS) key and hover over the tuple items to see their precise types."]}),(0,o.jsx)("video",{autoPlay:!0,controls:!0,muted:!0,src:i}),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Refreshing data"}),(0,o.jsx)("code",{children:"use-remote-data"})," supports seamless invalidation and refreshing of data, by specifying the optional ",(0,o.jsx)("code",{children:"invalidation"})," parameter to ",(0,o.jsx)("code",{children:"use-remote-data"}),". You specify an invalidation strategy, with for instance how many milliseconds the data is valid after it is received.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),"Once the data is deemed invalidated, you are informed through the second ",(0,o.jsx)("code",{children:"isInvalidated"}),"argument in the render prop given to ",(0,o.jsx)("code",{children:"WithRemoteData"}),". With that bit of information you can for instance render the old data as gray or deactivated while the application is waiting for fresh data.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),"Note that since the design of ",(0,o.jsx)("code",{children:"RemoteDataStore"})," is ",(0,o.jsx)("em",{children:"Lazy"}),", values are only invalidated and refreshed ",(0,o.jsx)("em",{children:"while the data is used by a component"}),". However, on first render afterwards the invalidation is noticed and you'll be informed through ",(0,o.jsx)("code",{children:"isInvalidated"})," as normal.",(0,o.jsx)(a.Y,{snippet:"invalidation"}),(0,o.jsx)("br",{}),(0,o.jsx)("h3",{children:"Only sometimes?"}),"If you want to turn auto-refreshing on and off, that easy to do as well, just set the"," ",(0,o.jsx)("code",{children:"invalidation"}),"parameter accordingly",(0,o.jsx)(a.Y,{snippet:"invalidation_sometimes"})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Sharing data with child components"}),"A very common use-case is that you have an app with for instance many routes. Each route will need some different subsets of data, and you want to keep as much data as possible cached when the user navigates back and forth.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),(0,o.jsx)("code",{children:"use-remote-data"})," supports this use-case well because ",(0,o.jsx)("code",{children:"RemoteDataStore"})," is",(0,o.jsx)("em",{children:" Lazy "})," and ",(0,o.jsx)("em",{children:" Caching "}),". You can define all the relevant data stores high up in the hierarchy, and data lifetimes neatly follows component lifecycles. You can then freely pass a store to any number of code paths, and the data will only be fetched once.",(0,o.jsx)(a.Y,{snippet:"use_twice"}),(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),(0,o.jsxs)("h3",{children:["Should I pass RemoteDataStore","<T>"," or just T? "]}),"There has been some confusion about this, but there is a semantic difference.",(0,o.jsx)("em",{children:"Can this component render without the data?"}),"Typically you may want to draw an outline of the application before you get any data, and the components which do that should probably accept a",(0,o.jsx)("code",{children:"RemoteDataStore"})," in props.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),"In most other cases it's better to just pass the value after it has been retrieved, for the singular reason that it's simpler.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Handling failure"}),"Another defining feature of ",(0,o.jsx)("code",{children:"use-remote-data"})," is the principled error handling and the retry functionality. Developers typically make an ad-hoc attempt at the former, while not many have the discipline to also do the latter.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),"This example creates a ",(0,o.jsx)("code",{children:"Promise"})," which fails every tenth time it is called. The sometimes-failing store is combined with another store which never fails, and you should hit"," ",(0,o.jsx)("em",{children:"retry "}),"a few times to see the interaction.",(0,o.jsx)(a.Y,{snippet:"handling_failure"})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Polling"}),"Something which comes up sometimes are APIs which require you to poll.",(0,o.jsx)("code",{children:"use-remote-data"})," supports this through an ",(0,o.jsx)("code",{children:"InvalidationStrategy"})," like seen above",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),(0,o.jsx)(a.Y,{snippet:"polling"})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Dynamic data"}),"Do you want to fetch paginated data? fetch quite a few ids out of many? You're covered here too, by the",(0,o.jsx)("code",{children:"useRemoteDatas"})," (plural) hook. In this case you provide a function to a ",(0,o.jsx)("code",{children:"Promise"})," ","which takes a parameter, and you ask the resulting ",(0,o.jsx)("code",{children:"RemoteDataStores"})," structure for the corresponding pages/ids.",(0,o.jsx)(a.Y,{snippet:"dynamic"})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Invalidate on dependency change"}),(0,o.jsx)("code",{children:"use-remote-data"})," follows the spirit of ",(0,o.jsx)("code",{children:"useEffect"})," and friends by supporting an array of dependencies. When a change is detected in that list, the data is automatically invalidated. Note that currently the ",(0,o.jsx)("code",{children:"JSON.stringify"}),"ed version of the dependencies is compared.",(0,o.jsx)(a.Y,{snippet:"invalidation_dependencies"})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("br",{}),(0,o.jsx)("h2",{children:"Updates"}),"Life is not only read-only though. Here is an example of sending data.",(0,o.jsx)(a.Y,{snippet:"create"}),(0,o.jsx)("br",{})]})]})})},3172:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>r});n(6540);var s=n(558),a=n(4848);const r=()=>{const e=(0,s.mp)((()=>{return e=1,void 0===t&&(t=1e3),new Promise((n=>setTimeout((()=>n(e)),t)));var e,t}));return(0,a.jsx)(s.nS,{store:e,children:e=>(0,a.jsx)("span",{children:e})})}},3544:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>i});n(6540);var s=n(558),a=n(4848),r=0;const o=()=>new Promise((e=>{r+=1,setTimeout((()=>e(r)),1e3)})),i=()=>{const e=(0,s.mp)(o,{invalidation:s.Mf.refetchAfterMillis(2e3)});return(0,a.jsx)(s.nS,{store:e,children:(e,t)=>(0,a.jsx)("span",{style:{color:t?"darkgray":"black"},children:e})})}},3832:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>o});var s=n(6540),a=n(558),r=n(4848);const o=()=>{const[e,t]=s.useState(""),[n,o]=s.useState(!1),i=(0,a.mp)((()=>(e=>new Promise((t=>{setTimeout((()=>t(`created user with name ${e} and id #1`)),1e3)})))(e)));return(0,r.jsxs)("div",{children:[(0,r.jsx)("h4",{children:"Create user"}),(0,r.jsxs)("label",{children:["name:",(0,r.jsx)("input",{onChange:e=>t(e.currentTarget.value),value:e})]}),(0,r.jsx)("button",{onClick:()=>o(!0),children:"Create user"}),n&&(0,r.jsx)(a.nS,{store:i,children:e=>(0,r.jsx)("p",{children:e})})]})}},4999:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>i});n(6540);var s=n(558),a=n(4848),r=0;const o=()=>new Promise((e=>{r+=1,setTimeout((()=>e(r)),1e3)})),i=()=>{const e=(0,s.mp)(o,{invalidation:s.Mf.pollUntil((e=>e>2),1e3),storeName:"polling-store"});return(0,a.jsx)(s.nS,{store:e,children:(e,t)=>t?(0,a.jsxs)("span",{children:["invalid data ",e]}):(0,a.jsx)("span",{children:e})})}},5107:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport {\n    InvalidationStrategy,\n    useRemoteData,\n    WithRemoteData,\n} from 'use-remote-data';\n\nvar i = 0;\nconst freshData = (): Promise<number> =>\n    new Promise((resolve) => {\n        i += 1;\n        setTimeout(() => resolve(i), 1000);\n    });\n\nexport const Component: React.FC = () => {\n    const store = useRemoteData(freshData, {\n        invalidation: InvalidationStrategy.pollUntil((x) => x > 2, 1000),\n        storeName: 'polling-store',\n    });\n\n    return (\n        <WithRemoteData store={store}>\n            {(num, notValid) =>\n                notValid ? <span>invalid data {num}</span> : <span>{num}</span>\n            }\n        </WithRemoteData>\n    );\n};\n"},5170:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport {\n    InvalidationStrategy,\n    RemoteDataStore,\n    useRemoteData,\n    WithRemoteData,\n} from 'use-remote-data';\n\nvar i = 0;\nconst freshData = (): Promise<number> =>\n    new Promise((resolve) => {\n        i += 1;\n        setTimeout(() => resolve(i), 1000);\n    });\n\nexport const Component: React.FC = () => {\n    const store = useRemoteData(freshData, {\n        invalidation: InvalidationStrategy.refetchAfterMillis(2000),\n    });\n\n    return (\n        <div>\n            <Child store={store} />\n            <Child store={store} />\n        </div>\n    );\n};\n\nexport const Child: React.FC<{ store: RemoteDataStore<number> }> = ({\n    store,\n}) => (\n    <WithRemoteData store={store}>\n        {(num, isInvalidated) => (\n            <p>\n                <span style={{ color: isInvalidated ? 'darkgray' : 'black' }}>\n                    {num}\n                </span>\n            </p>\n        )}\n    </WithRemoteData>\n);\n"},5525:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport {\n    InvalidationStrategy,\n    RemoteDataStore,\n    RemoteDataStores,\n    useRemoteDatas,\n    WithRemoteData,\n} from 'use-remote-data';\n\nlet is = new Map<string, number>();\n\nconst freshData = (key: string): Promise<string> =>\n    new Promise((resolve) => {\n        const num = is.get(key) || 0;\n        is.set(key, num + 1);\n        setTimeout(() => resolve(`${key}: ${num}`), 500);\n    });\n\nexport const Component: React.FC = () => {\n    // provide `freshData` function\n    const stores: RemoteDataStores<string, string> = useRemoteDatas(freshData, {\n        invalidation: InvalidationStrategy.refetchAfterMillis(1000),\n    });\n\n    const [wanted, setWanted] = React.useState('a, b,d');\n\n    const parsedWanted: readonly string[] = wanted\n        .split(',')\n        .map((s) => s.trim())\n        .filter((s) => s.length > 0);\n\n    const currentStores: readonly RemoteDataStore<string>[] =\n        stores.getMany(parsedWanted);\n\n    return (\n        <div>\n            Add/remove stores by editing the text, it's split by comma.\n            <input\n                value={wanted}\n                onChange={(e) => setWanted(e.currentTarget.value)}\n            />\n            <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n                <Column rows={currentStores} />\n                <Column rows={currentStores} />\n            </div>\n        </div>\n    );\n};\n\nexport const Column: React.FC<{ rows: readonly RemoteDataStore<string>[] }> = ({\n    rows,\n}) => {\n    const renderedRows = rows.map((store, idx) => (\n        <WithRemoteData store={store} key={idx}>\n            {(value, isInvalidated) => (\n                <p>\n                    <span\n                        style={{ color: isInvalidated ? 'darkgray' : 'black' }}\n                    >\n                        {value}\n                    </span>\n                </p>\n            )}\n        </WithRemoteData>\n    ));\n    return <div>{renderedRows}</div>;\n};\n"},5550:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Child:()=>d,Component:()=>i});n(6540);var s=n(558),a=n(4848),r=0;const o=()=>new Promise((e=>{r+=1,setTimeout((()=>e(r)),1e3)})),i=()=>{const e=(0,s.mp)(o,{invalidation:s.Mf.refetchAfterMillis(2e3)});return(0,a.jsxs)("div",{children:[(0,a.jsx)(d,{store:e}),(0,a.jsx)(d,{store:e})]})},d=e=>{let{store:t}=e;return(0,a.jsx)(s.nS,{store:t,children:(e,t)=>(0,a.jsx)("p",{children:(0,a.jsx)("span",{style:{color:t?"darkgray":"black"},children:e})})})}},5588:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport {\n    InvalidationStrategy,\n    RemoteDataStore,\n    useRemoteData,\n    WithRemoteData,\n} from 'use-remote-data';\n\nvar i = 0;\nconst freshData = (): Promise<number> =>\n    new Promise((resolve) => {\n        i += 1;\n        setTimeout(() => resolve(i), 1000);\n    });\n\nvar j = 0;\nconst failSometimes = (): Promise<number> =>\n    new Promise((resolve, reject) => {\n        j += 1;\n        if (j % 10 === 0) reject(`${j} was dividable by 10`);\n        else resolve(j);\n    });\n\nexport const Component: React.FC = () => {\n    const one = useRemoteData(freshData, {\n        invalidation: InvalidationStrategy.refetchAfterMillis(1000),\n    });\n    const two = useRemoteData(failSometimes, {\n        invalidation: InvalidationStrategy.refetchAfterMillis(100),\n    });\n    return (\n        <WithRemoteData store={RemoteDataStore.all(one, two)}>\n            {([num1, num2]) => (\n                <span>\n                    {num1} - {num2}\n                </span>\n            )}\n        </WithRemoteData>\n    );\n};\n"},7879:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});const s=n.p+"assets/medias/typesafe-combine-37a96b8d5a32a72484882b73e60806db.webm"},8789:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>o});n(6540);var s=n(558),a=n(4848);function r(e,t){return void 0===t&&(t=1e3),new Promise((n=>setTimeout((()=>n(e)),t)))}const o=()=>{const e=(0,s.mp)((()=>r(1))),t=(0,s.mp)((()=>r("Hello"))),n=s.Qt.all(e,t);return(0,a.jsx)(s.nS,{store:n,children:e=>{let[t,n]=e;return(0,a.jsxs)("span",{children:[t," and ",n]})}})}},8794:(e,t,n)=>{"use strict";n.d(t,{Y:()=>i});var s=n(6289),a=n(6540),r=n(8069),o=n(4848);const i=e=>{let{snippet:t}=e;const i=n(1266)(`./${t}.tsx`).default,{Component:d}=n(250)(`./${t}`),[c,l]=a.useState(0);return(0,o.jsxs)("div",{children:[(0,o.jsx)(r.A,{language:"tsx",children:i}),(0,o.jsxs)("div",{children:[(0,o.jsx)("div",{children:(0,o.jsx)(s.A,{className:"button button--secondary button--sm",onClick:()=>l(c+1),children:0===c?"Run snippet":"Run again"})}),c>0&&(0,o.jsx)("div",{style:{padding:"1em",margin:"1em",backgroundColor:"#b8e092",color:"black"},children:(0,o.jsx)(d,{},c)})]}),(0,o.jsx)("br",{})]})}},8936:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport {\n    RemoteDataStore,\n    useRemoteData,\n    WithRemoteData,\n} from 'use-remote-data';\n\nfunction produce<T>(value: T, delay: number = 1000): Promise<T> {\n    return new Promise((resolve) => setTimeout(() => resolve(value), delay));\n}\n\nexport const Component: React.FC = () => {\n    const computeOne: RemoteDataStore<number> = useRemoteData(() => produce(1));\n\n    return (\n        <WithRemoteData store={computeOne}>\n            {(num: number) => <span>{num}</span>}\n        </WithRemoteData>\n    );\n};\n"},9439:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const s="import * as React from 'react';\nimport {\n    InvalidationStrategy,\n    useRemoteData,\n    WithRemoteData,\n} from 'use-remote-data';\n\nvar i = 0;\nconst freshData = (): Promise<number> =>\n    new Promise((resolve) => {\n        i += 1;\n        setTimeout(() => resolve(i), 1000);\n    });\n\nexport const Component: React.FC = () => {\n    const [autoRefresh, setAutoRefresh] = React.useState(true);\n    const store = useRemoteData(freshData, {\n        invalidation: autoRefresh\n            ? InvalidationStrategy.refetchAfterMillis(1000)\n            : undefined,\n    });\n\n    return (\n        <div>\n            <label>\n                Autorefresh:\n                <input\n                    type=\"checkbox\"\n                    onChange={(e) => setAutoRefresh(!autoRefresh)}\n                    checked={autoRefresh}\n                />\n            </label>\n            <br />\n            <WithRemoteData store={store}>\n                {(num, isInvalidated) => (\n                    <span\n                        style={{ color: isInvalidated ? 'darkgray' : 'black' }}\n                    >\n                        {num}\n                    </span>\n                )}\n            </WithRemoteData>\n        </div>\n    );\n};\n"},9641:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Column:()=>c,Component:()=>d});var s=n(6540),a=n(558),r=n(4848);let o=new Map;const i=e=>new Promise((t=>{const n=o.get(e)||0;o.set(e,n+1),setTimeout((()=>t(`${e}: ${n}`)),500)})),d=()=>{const e=(0,a.$o)(i,{invalidation:a.Mf.refetchAfterMillis(1e3)}),[t,n]=s.useState("a, b,d"),o=t.split(",").map((e=>e.trim())).filter((e=>e.length>0)),d=e.getMany(o);return(0,r.jsxs)("div",{children:["Add/remove stores by editing the text, it's split by comma.",(0,r.jsx)("input",{value:t,onChange:e=>n(e.currentTarget.value)}),(0,r.jsxs)("div",{style:{display:"flex",justifyContent:"space-around"},children:[(0,r.jsx)(c,{rows:d}),(0,r.jsx)(c,{rows:d})]})]})},c=e=>{let{rows:t}=e;const n=t.map(((e,t)=>(0,r.jsx)(a.nS,{store:e,children:(e,t)=>(0,r.jsx)("p",{children:(0,r.jsx)("span",{style:{color:t?"darkgray":"black"},children:e})})},t)));return(0,r.jsx)("div",{children:n})}}}]);