"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[21],{6051:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"combining-stores","title":"Combining Stores","description":"One of the library\u2019s most powerful patterns is combining multiple requests.","source":"@site/docs/combining-stores.mdx","sourceDirName":".","slug":"/combining-stores","permalink":"/use-remote-data/docs/combining-stores","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/master/website/docs/combining-stores.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Updates (Write Operations)","permalink":"/use-remote-data/docs/updates"},"next":{"title":"Dynamic Data","permalink":"/use-remote-data/docs/dynamic-data"}}');var i=s(4848),o=s(8453),r=s(8794),a=s(7879);const c={},l="Combining Stores",d={},h=[{value:"A Note on TypeScript Tooling",id:"a-note-on-typescript-tooling",level:4}];function u(e){const t={a:"a",code:"code",em:"em",h1:"h1",h4:"h4",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"combining-stores",children:"Combining Stores"})}),"\n",(0,i.jsxs)(t.p,{children:["One of the library\u2019s most powerful patterns is combining multiple requests.\nIf you have two or more ",(0,i.jsx)(t.code,{children:"RemoteDataStore"}),"s,\nyou can merge them into a single store that represents all requests in flight.\nThis is done via ",(0,i.jsx)(t.code,{children:"RemoteDataStore.all(...)"}),":"]}),"\n",(0,i.jsxs)(t.p,{children:["Under the hood, the combined store uses the ",(0,i.jsx)(t.code,{children:"RemoteData.all(...)"})," function, which:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Returns ",(0,i.jsx)(t.code,{children:"No"})," if ",(0,i.jsx)(t.em,{children:"any"})," store fails. A single \u201cretry\u201d will only re-fetch the failing requests."]}),"\n",(0,i.jsxs)(t.li,{children:["Returns ",(0,i.jsx)(t.code,{children:"Pending"})," if ",(0,i.jsx)(t.em,{children:"any"})," constituent store is ",(0,i.jsx)(t.code,{children:"Pending"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["Returns ",(0,i.jsx)(t.code,{children:"Yes"})," with a tuple of all combined values if ",(0,i.jsx)(t.em,{children:"all"})," succeed."]}),"\n",(0,i.jsx)(t.li,{children:"Manages invalidation states if any store becomes invalidated."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["In a render prop, you can\n",(0,i.jsx)(t.a,{href:"https://levelup.gitconnected.com/crazy-powerful-typescript-tuple-types-9b121e0a690c",children:"destructure"}),"\nthe results."]}),"\n",(0,i.jsx)(r.Y,{snippet:"combine"}),"\n",(0,i.jsx)(t.h4,{id:"a-note-on-typescript-tooling",children:"A Note on TypeScript Tooling"}),"\n",(0,i.jsxs)(t.p,{children:["The TypeScript compiler (and IDEs) fully understands these combined stores.\nYou can hover over the tuple items (often with ",(0,i.jsx)("kbd",{children:"Ctrl"})," or ",(0,i.jsx)("kbd",{children:"Command"}),") to see precise type information."]}),"\n",(0,i.jsx)("video",{autoPlay:!0,controls:!0,muted:!0,style:{maxWidth:"100%"},src:a.A})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},7879:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/medias/typesafe-combine-37a96b8d5a32a72484882b73e60806db.webm"}}]);