"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[528],{5907:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"parallel","title":"Parallel vs. Sequential Fetching","description":"When your app renders data from multiple RemoteDataStore instances, they will initiate their requests in parallel if the data is missing or old.","source":"@site/docs/parallel.mdx","sourceDirName":".","slug":"/parallel","permalink":"/use-remote-data/docs/parallel","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/master/website/docs/parallel.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Data Lifetime","permalink":"/use-remote-data/docs/lifetime"}}');var r=a(4848),s=a(8453);const n={},l="Parallel vs. Sequential Fetching",o={},d=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"parallel-vs-sequential-fetching",children:"Parallel vs. Sequential Fetching"})}),"\n",(0,r.jsxs)(t.p,{children:["When your app renders data from multiple ",(0,r.jsx)(t.code,{children:"RemoteDataStore"})," instances, they will initiate their requests in parallel if the data is missing or old."]}),"\n",(0,r.jsx)(t.p,{children:"This parallel behavior ensures quicker overall loading times when you need multiple pieces of data at once."}),"\n",(0,r.jsxs)(t.p,{children:["If you need to fetch data in a specific order, you can achieve this by nesting ",(0,r.jsx)(t.code,{children:"WithData"})," inside ",(0,r.jsx)(t.code,{children:"WithData"})," in your JSX,\nmeaning that the inner won't be rendered/requested until the outer has finished."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);