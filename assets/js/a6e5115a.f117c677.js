"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[572],{9235:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"lifetime","title":"Data Lifetime Aligned with React Components","description":"Because each store is created by the hook in a mounted component, data only exists as long as that component is active.","source":"@site/docs/lifetime.mdx","sourceDirName":".","slug":"/lifetime","permalink":"/use-remote-data/docs/lifetime","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/master/website/docs/lifetime.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Lazy loading","permalink":"/use-remote-data/docs/lazy-loading"},"next":{"title":"Parallel vs. Sequential Fetching","permalink":"/use-remote-data/docs/parallel"}}');var n=a(4848),s=a(8453);const o={},r="Data Lifetime Aligned with React Components",c={},l=[];function d(e){const t={h1:"h1",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"data-lifetime-aligned-with-react-components",children:"Data Lifetime Aligned with React Components"})}),"\n",(0,n.jsx)(t.p,{children:"Because each store is created by the hook in a mounted component, data only exists as long as that component is active.\nThere\u2019s no global state or context\u2014once the component unmounts, the store is effectively garbage-collected.\nThis design ensures data is retained only while it\u2019s relevant."})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);