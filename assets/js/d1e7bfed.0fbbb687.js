"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[337],{2597:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"remote-data-pattern","title":"Remote Data pattern","description":"The Remote Data pattern is a popular way to model all possible states of asynchronous data requests in a single, explicit type.","source":"@site/docs/remote-data-pattern.mdx","sourceDirName":".","slug":"/remote-data-pattern","permalink":"/use-remote-data/docs/remote-data-pattern","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/master/website/docs/remote-data-pattern.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/use-remote-data/docs/getting-started"},"next":{"title":"Invalidation / Refresh data","permalink":"/use-remote-data/docs/invalidation"}}');var i=a(4848),r=a(8453);const s={},o="Remote Data pattern",d={},l=[];function c(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"remote-data-pattern",children:"Remote Data pattern"})}),"\n",(0,i.jsx)(t.p,{children:"The Remote Data pattern is a popular way to model all possible states of asynchronous data requests in a single, explicit type.\nYou\u2019ll often find articles discussing it in the context of functional programming libraries,\nwhere a central \u201cunion type\u201d (or \u201csum type\u201d) encapsulates:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"No data yet (lazy initialization)"}),"\n",(0,i.jsx)(t.li,{children:"Data is being fetched (loading)"}),"\n",(0,i.jsx)(t.li,{children:"An error occurred (with retry information)"}),"\n",(0,i.jsx)(t.li,{children:"Data is available (success)"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["This library extends the classic idea by adding ",(0,i.jsx)(t.a,{href:"invalidation",children:"invalidation"})," states for automatically re-fetching stale data."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"import { WeakError } from './WeakError';\nimport { Either } from './Either';\n\nexport type RemoteData<T, E = never> =\n    | RemoteData.Initial\n    | RemoteData.Pending\n    | RemoteData.No<E>\n    | RemoteData.Yes<T>\n    | RemoteData.InvalidatedImmediate<T>\n    | RemoteData.InvalidatedInitial<T>\n    | RemoteData.InvalidatedPending<T>;\n\nexport namespace RemoteData {\n    // We haven\u2019t started fetching yet (lazy load)\n    export interface Initial {\n        type: 'initial';\n    }\n    // A request is ongoing (fetch in progress).\n    export interface Pending {\n        type: 'pending';\n    }\n    // The request failed (includes errors and a retry callback).\n    export interface No<E> {\n        type: 'no';\n        errors: Either<WeakError, E>[];\n        retry: () => Promise<void>;\n    }\n    // The request succeeded (includes the fetched value).\n    export interface Yes<T> {\n        type: 'yes';\n        value: T;\n        updatedAt: Date;\n    }\n    // We have stale data, and it was never considered valid (used for polling)\n    export interface InvalidatedImmediate<T> {\n        type: 'invalidated-immediate';\n        invalidated: RemoteData.Yes<T>;\n    }\n    // We have stale data but haven\u2019t started re-fetching.\n    export interface InvalidatedInitial<T> {\n        type: 'invalidated-initial';\n        invalidated: RemoteData.Yes<T>;\n    }\n    // We have stale data and are re-fetching\n    export interface InvalidatedPending<T> {\n        type: 'invalidated-pending';\n        invalidated: RemoteData.Yes<T>;\n    }\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Note that the ",(0,i.jsx)(t.code,{children:"E"})," type parameter for expected errors is optional, see ",(0,i.jsx)(t.a,{href:"typed-errors",children:"typed errors"})," for more information."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);